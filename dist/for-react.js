import{a as F,b as W}from"./chunk-GMCTUMYN.js";import{a as g,b as S,c as y,d as f,e as R,f as k,g as C,h as v,i as p,j as _,k as E,l as V,m as h,n as w,o as d,p as T}from"./chunk-BE7NYE7O.js";import{createElement as x,useEffect as a,useRef as l,useState as s}from"react";function D(e){let t=l(d(e,!0));return a(()=>()=>t.current.dispose(),[t.current]),b(t.current)}function G(e){a(()=>{let t=T(()=>e());return()=>t.dispose()},[])}function b(e){let[t,r]=s(()=>e.peek()),n=l();return n.current||(n.current=e.subscribe(u=>{r(u)})),a(()=>()=>n.current?.dispose(),[e]),t}function H(...e){let[t,r]=s(()=>e.map(n=>n.peek()));return a(()=>{let n=e.map((u,c)=>u.subscribe(o=>{r(m=>{let i=m.slice();return i[c]=o,i})}));return()=>{n.forEach(u=>u.dispose())}},e),t}function I(e){return function(r){let[n,u]=s({});return a(()=>{function c(){return p.run({id:"TC"+f(),_signalChanged(){u({})},_trackSignal(){},_untrackSignal(){},dispose(){}},()=>{e(r)}),()=>{}}let o=c();return()=>{o()}},[e,r]),x(e,r)}}export{E as Computed,V as Effect,_ as Signal,h as batch,d as computed,g as config,S as devTools,v as dispose,T as effect,I as experimental_withSignalTracking,k as isComputed,C as isEffect,R as isSignal,F as persistedSignal,w as signal,W as update,D as useComputed,G as useSignalEffect,b as useSignalValue,H as useSignalValues,y as withIdPrefix};
